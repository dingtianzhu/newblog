{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"p",
				"parentNode"
			],
			[
				"onP",
				"onPaste"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import { h, render, nextTick, ref } from 'vue'\n\ninterface El {\n  reg: RegExp\n  el: string\n  type: string\n  ck: Function\n  class: string\n}\nlet isComposing = false // 用于追踪是否在拼音输入状态\nconst copyText = ref('复制代码')\nconst elList: El[] = [\n  {\n    reg: /^#\\ /,\n    el: 'h1',\n    type: 'block',\n    ck: () => {},\n    class: 'h1class'\n  },\n  {\n    reg: /^##\\ /,\n    el: 'h2',\n    type: 'block',\n    ck: () => {},\n    class: 'h2class'\n  },\n  {\n    reg: /^###\\ /,\n    el: 'h3',\n    type: 'block',\n    ck: () => {},\n    class: 'h3class'\n  },\n  {\n    reg: /^####\\ /,\n    el: 'h4',\n    type: 'block',\n    ck: () => {},\n    class: 'h4class'\n  },\n  {\n    reg: /^#####\\ /,\n    el: 'h5',\n    type: 'block',\n    ck: () => {},\n    class: 'h5class'\n  },\n  {\n    reg: /^######\\ /,\n    el: 'h6',\n    type: 'block',\n    ck: () => {},\n    class: 'h6class'\n  },\n  {\n    reg: /(?<!`)(`([^`]+)`(?!`))/g,\n    el: 'code',\n    type: 'inline',\n    ck: () => {},\n    class: 'code-md-class'\n  },\n  {\n    reg: /(?<!\\*)\\*(?!\\*)(?=\\S)(.+?)(?<=\\S)\\*(?!\\*)|(?<!_)_(?!_)(?=\\S)(.+?)(?<=\\S)_(?!_)/g,\n    el: 'em',\n    type: 'inline',\n    ck: () => {},\n    class: 'em-md-class'\n  },\n  {\n    reg: /(\\*\\*|__)(?=\\S)(.+?)(?<=\\S)\\1/g,\n    el: 'b',\n    type: 'inline',\n    ck: () => {},\n    class: 'b-md-class'\n  },\n  {\n    reg: /(^|\\n)[*-]\\ +(.*?)(?=\\n|$)/g,\n    el: 'ul',\n    type: 'com',\n    ck: () => {},\n    class: 'ul-li-md-class'\n  },\n  {\n    reg: /(^|\\n)```([\\s\\S]*?)```/g,\n    el: 'pre',\n    type: 'block',\n    ck: () => {},\n    class: 'code-block-class' // 添加代码块的配置\n  }\n]\n\n// 移动光标到指定元素的末尾\nconst moveCursorToEnd = (element: Node) => {\n  const range = document.createRange()\n  const selection = window.getSelection()\n  range.setStartAfter(element)\n  range.collapse(true)\n  selection?.removeAllRanges()\n  selection?.addRange(range)\n}\n\n// 渲染虚拟节点到文档片段\nconst renderToFragment = (vNode: any, fragment: DocumentFragment) => {\n  const tempDiv = document.createElement('div')\n  render(vNode, tempDiv)\n  fragment.appendChild(tempDiv.firstChild!)\n}\n\nconst highlightCode = (code: string, type: string = 'javascript') => {\n  // 这里可以实现代码高亮的逻辑\n  // 例如，将特定关键字包裹在 span 标签内\n  let str: RegExp\n  switch (type) {\n    case 'javascript':\n      str = /(const |let |var  |function |if |else |return |for |while |class |import |export )/g\n      break\n    default:\n      str = /(const |let |var  |function |if |else |return |for |while |class |import |export )/g\n  }\n\n  return code\n    .replace(str, '<span class=\"mk-keyword\">$1</span>')\n    .replace(/([a-zA-Z_]\\w*)\\s*\\(/g, '<span class=\"mk-function\">$1</span>(')\n    .replace(/(\\/\\/.*)/g, '<i class=\"mk-comment\">$1</i>')\n}\n\nconst createElementBlock = (\n  el: string,\n  className: string,\n  text: string,\n  contenteditable: any = true,\n  keydown: Function = mkKeydown\n) => {\n  return h(\n    el,\n    {\n      class: className,\n      contenteditable,\n      tabindex: '0',\n      onInput: mkInput,\n      onCompositionend: mkCompositionEnd,\n      onCompositionstart: mkCompositionStart,\n      onKeydown: keydown || mkKeydown\n    },\n    text\n  )\n}\n// 处理元素\nconst setElement = (content: string, el: El, node: Node) => {\n  const match = content.match(el.reg)\n  if (!match) return\n  const fragment = document.createDocumentFragment()\n  const parent = node.parentNode\n  let endNode: Node | null = null\n  // 先处理代码块\n  if (el.type === 'block' && el.reg.test(content)) {\n    const vNode = createElementBlock(el.el, el.class, content.replace(el.reg, '').trim())\n    renderToFragment(vNode, fragment)\n    endNode = fragment.firstChild\n    // }\n  } else if (el.type === 'inline') {\n    let lastIndex = 0\n    while (true) {\n      const result = el.reg.exec(content)\n      if (!result) break\n\n      if (result.index > lastIndex) {\n        fragment.appendChild(\n          document.createTextNode(content.slice(lastIndex, result.index) + '\\u2009')\n        )\n      } else {\n        fragment.appendChild(document.createTextNode('\\u2009'))\n      }\n      let text = result[2] || result[1] || result[0]\n      const inlineVNode = createElementBlock(el.el, el.class, text)\n\n      renderToFragment(inlineVNode, fragment)\n\n      lastIndex = el.reg.lastIndex\n    }\n\n    endNode = document.createTextNode('\\u2009')\n    fragment.appendChild(endNode)\n    if (lastIndex < content.length) {\n      fragment.appendChild(document.createTextNode(content.slice(lastIndex)))\n    }\n  } else if (el.type === 'com') {\n    const ulVNode = h(\n      el.el,\n      { class: el.class },\n      match.map((m) => h('li', {}, m[2])) // 创建 li\n    )\n    renderToFragment(ulVNode, fragment)\n    endNode = fragment.firstChild\n    fragment.appendChild(endNode!)\n  }\n  if (endNode && parent) {\n    node.replaceChild(fragment, node!.firstChild!)\n    moveCursorToEnd(endNode)\n  }\n}\n\n// 点击复制的事件处理函数\nconst handleCopyClick = (e: Event) => {\n  const cnode = e.target as Node\n  const text = cnode.parentNode?.lastChild?.firstChild?.textContent\n\n  navigator.clipboard.writeText(text!).then(() => {\n    copyText.value = '已复制'\n\n    // 一段时间后恢复“复制代码”按钮文本\n    setTimeout(() => {\n      copyText.value = '复制代码'\n    }, 2000) // 2秒后恢复\n  })\n}\nconst handleCodeBlock = (type: string, codeContent: string, e: Event) => {\n  // const codeContent = '' // 合并多行代码\n  const node = e.target as Node\n  const highlightedCode = highlightCode(codeContent) // 高亮代码\n  const vNode = h('div', { class: 'code-block-class' }, [\n    h('div', { class: 'code-header' }, type), // 顶部样式\n    h(\n      'button',\n      {\n        class: 'delete-button',\n        onClick: (e) => {\n          removeCurrentNode(e, '', true)\n        }\n      },\n      '移除' // 复制代码按钮\n    ),\n    h(\n      'button',\n      {\n        class: 'copy-button',\n        onClick: handleCopyClick\n      },\n      copyText.value // 复制代码按钮\n    ),\n    h('pre', { class: 'code-content-class' }, [\n      h(\n        'div',\n        {\n          class: 'code-line placeholder',\n          contenteditable: 'plaintext-only',\n          tabindex: '0',\n          onInput: mkBlackCodeInput,\n          onCompositionend: mkCompositionEnd,\n          onCompositionstart: mkCompositionStart\n          // onKeydown: keydown || mkKeydown\n        },\n        highlightedCode\n      )\n    ]) // 代码块\n  ])\n\n  const fragment = document.createDocumentFragment()\n  renderToFragment(vNode, fragment)\n  node?.parentNode?.insertBefore(fragment, node)\n  const f = node?.previousSibling?.lastChild?.firstChild as HTMLElement\n  f.focus()\n  // 在 endNode 的后面插入新的代码块\n  if (!node?.nextSibling) {\n    node!.textContent = null\n  } else {\n    removeCurrentNode(e, '')\n  }\n\n  // }\n}\nconst saveSelection = (containerEl: HTMLElement) => {\n  const selection = window.getSelection()\n  if (selection!.rangeCount > 0) {\n    const range = selection?.getRangeAt(0)\n    const preSelectionRange = range?.cloneRange()\n    preSelectionRange?.selectNodeContents(containerEl)\n    preSelectionRange?.setEnd(range!.startContainer, range!.startOffset)\n    const start = preSelectionRange!.toString().length\n\n    return {\n      start: start,\n      end: start + range!.toString().length\n    }\n  }\n  return null\n}\nconst restoreSelection = (containerEl: HTMLElement, savedSel: any) => {\n  const charIndex = { count: 0 }\n  const range = document.createRange()\n  range.setStart(containerEl, 0)\n  range.collapse(true)\n\n  const nodeStack = [containerEl]\n  let node,\n    foundStart = false,\n    stop = false\n\n  while (!stop && (node = nodeStack.pop())) {\n    // 检查节点是否为文本节点\n    if (node.nodeType === Node.TEXT_NODE) {\n      const textNode = node as unknown as Text // 现在可以安全地断言为 Text 类型\n      const nextCharIndex = charIndex.count + textNode.length\n\n      if (!foundStart && savedSel.start >= charIndex.count && savedSel.start <= nextCharIndex) {\n        range.setStart(textNode, savedSel.start - charIndex.count)\n        foundStart = true\n      }\n      if (foundStart && savedSel.end >= charIndex.count && savedSel.end <= nextCharIndex) {\n        range.setEnd(textNode, savedSel.end - charIndex.count)\n        stop = true\n      }\n      charIndex.count = nextCharIndex\n    } else {\n      // 如果不是文本节点，则继续处理其子节点\n      for (let i = node.childNodes.length - 1; i >= 0; i--) {\n        nodeStack.push(node?.childNodes[i] as HTMLElement)\n      }\n    }\n  }\n\n  const selection = window.getSelection()\n  selection?.removeAllRanges()\n  selection?.addRange(range)\n}\nconst mkBlackCodeInput = (e: Event, str: string = '</span>') => {\n  const el = e.target as HTMLElement\n  const content = el.textContent\n  const lastSpanIndex = content?.lastIndexOf(str) || 0\n  // 根据最后一个 </span> 分割字符串\n  if (lastSpanIndex !== -1) {\n    const part1 = content?.substring(0, lastSpanIndex + 7) // 包含 </span> 的部分\n    const part2 = content?.substring(lastSpanIndex + 7) || '' // 剩余部分\n    const res = highlightCode(part2)\n    el.innerHTML = part1 + res\n    return\n  }\n\n  const res = highlightCode(content!)\n  const savedSelection = saveSelection(el)\n  el.innerHTML = res\n  if (savedSelection) {\n    restoreSelection(el, savedSelection) // 恢复光标位置\n  }\n}\nconst processContent = (e: Event, content: string) => {\n  if (content.match(/^```.*/g)) {\n    const type = content.split('```')[1] || 'javascript'\n    handleCodeBlock(type, '', e)\n    // }\n  } else {\n    elList.forEach((el) => setElement(content, el, e.target as Node))\n  }\n}\n\nconst mkInput = (e: any) => {\n  if (isComposing) return\n  if (!e) {\n    console.error('Event is undefined')\n    return\n  }\n  const target = e.target as HTMLElement | null\n  if (!target) return\n  const content = (target as HTMLElement).textContent\n  console.log('🚀 ~ mkInput ~ content:', content)\n  content && processContent(e, content)\n}\n\nconst mkKeydown = (e: Event) => {\n  setInputPrevent(e)\n}\n\n// 当用户开始拼音输入时\nconst mkCompositionStart = (e: Event) => {\n  isComposing = true\n}\n\n// 当用户结束拼音输入时\nconst mkCompositionEnd = (e: any) => {\n  isComposing = false\n\n  mkInput(e)\n}\nconst removeCurrentNode = (e: Event, text: string | undefined = '', type: boolean = false) => {\n  let target: HTMLElement\n\n  if (type) target = (e.target as HTMLElement).parentNode as HTMLElement\n  else target = e.target as HTMLElement\n  const previousSibling = target?.previousSibling as HTMLElement\n  console.log('🚀 ~ removeCurrentNode ~ previousSibling:', previousSibling)\n\n  // 如果存在前一个兄弟节点且为 contenteditable\n  if (previousSibling && previousSibling.isContentEditable) {\n    // 将特定的字符串追加到前一个节点的末尾\n\n    // 将光标移动到前一个节点的末尾\n    const range = document.createRange()\n    const selection = window.getSelection()\n\n    // 将光标设置到前一个节点的最后位置\n    range.selectNodeContents(previousSibling)\n    range.collapse(false) // 设置为 false 表示光标放在内容末尾\n\n    // 清除现有的选区，并将新的范围添加到选区\n    selection?.removeAllRanges()\n    selection?.addRange(range)\n    e.preventDefault()\n    // 聚焦到前一个可编辑容器\n    if (previousSibling.firstChild?.firstChild) {\n      const newNode = previousSibling?.firstChild.firstChild as HTMLElement\n      rePosition(target, previousSibling, newNode, text)\n    } else {\n      rePosition(target, previousSibling, previousSibling, text)\n    }\n    return\n  }\n\n  if (type) {\n    const nextSibling = target.nextSibling as HTMLElement\n\n    rePosition(target, nextSibling, nextSibling, '', type)\n  }\n}\n\nconst rePosition = (\n  target: any,\n  previousSibling: HTMLElement,\n  newNode: HTMLElement,\n  text: string = '',\n  type: boolean = false\n) => {\n  if (previousSibling) previousSibling.focus()\n\n  if (!type) {\n    const savedSelection = saveSelection(newNode)\n    newNode.textContent! += text\n    if (savedSelection) {\n      restoreSelection(newNode, savedSelection) // 恢复光标位置\n    }\n  }\n  if (target && target.parentNode) {\n    // 从父节点中移除目标元素\n    target.parentNode.removeChild(target)\n  }\n}\nconst setInputPrevent = (e: Event) => {\n  const parent = (e.target as Node).parentNode\n  const content = (e.target as HTMLElement).textContent\n  const selection = window.getSelection()\n  const range = selection?.getRangeAt(0)\n  const currentNode = range?.startContainer\n  const target = e.target as HTMLElement\n  // 获取光标后的内容\n  const textAfterCursor = currentNode?.textContent?.slice(range?.endOffset)\n\n  if (e instanceof KeyboardEvent && e.key === 'Enter') {\n    if (isComposing) return\n    if (content?.match(/```.*/g)) {\n      return\n    }\n    e.preventDefault() // 阻止默认的回车行为\n    currentNode!.textContent = currentNode!.textContent!.slice(0, range?.endOffset)\n    // 创建一个新的 div 元素\n    const newDiv = createElementBlock('div', 'placeholder', textAfterCursor!)\n    // 将焦点移到新的 div 上\n    const fragment = document.createDocumentFragment()\n    // 使用 render 函数将虚拟节点渲染为真实 DOM\n    renderToFragment(newDiv, fragment)\n    // 将生成的真实 DOM 插入到当前 div 的下一个兄弟节点位置\n    const newDivElement = fragment.firstChild\n    if (newDivElement && parent) {\n      // 将生成的真实 DOM 插入到当前 div 的下一个兄弟节点位置\n      if (target.nextSibling) {\n        parent.insertBefore(newDivElement, target.nextSibling)\n      } else {\n        // 如果当前没有下一个兄弟节点，则插入到最后\n        parent.appendChild(newDivElement)\n      }\n      const nextSibling = target.nextSibling as HTMLElement\n      nextSibling.focus()\n    }\n  } else if (e instanceof KeyboardEvent && e.key === 'Backspace') {\n    if (!currentNode!.textContent!.slice(0, range?.endOffset)) {\n      removeCurrentNode(e, textAfterCursor)\n    }\n  }\n}\n\nexport { mkKeydown, mkCompositionStart, mkCompositionEnd, mkInput }\n",
			"file": "src/libs/markdown.ts",
			"file_size": 14089,
			"file_write_time": 133739755628411276,
			"settings":
			{
				"buffer_size": 13111,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					524,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAHSsAAAAAAAAjKwAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAHSsAAAAAAAAjKwAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAHSsAAAAAAAAjKwAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaNgAAaW1wb3J0IHsgaCwgcmVuZGVyLCBuZXh0VGljaywgcmVmIH0gZnJvbSAndnVlJwoKaW50ZXJmYWNlIEVsIHsKICByZWc6IFJlZ0V4cAogIGVsOiBzdHJpbmcKICB0eXBlOiBzdHJpbmcKICBjazogRnVuY3Rpb24KICBjbGFzczogc3RyaW5nCn0KbGV0IGlzQ29tcG9zaW5nID0gZmFsc2UgLy8g55So5LqO6L+96Liq5piv5ZCm5Zyo5ou86Z+z6L6T5YWl54q25oCBCmNvbnN0IGNvcHlUZXh0ID0gcmVmKCflpI3liLbku6PnoIEnKQpjb25zdCBlbExpc3Q6IEVsW10gPSBbCiAgewogICAgcmVnOiAvXiNcIC8sCiAgICBlbDogJ2gxJywKICAgIHR5cGU6ICdibG9jaycsCiAgICBjazogKCkgPT4ge30sCiAgICBjbGFzczogJ2gxY2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC9eIyNcIC8sCiAgICBlbDogJ2gyJywKICAgIHR5cGU6ICdibG9jaycsCiAgICBjazogKCkgPT4ge30sCiAgICBjbGFzczogJ2gyY2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC9eIyMjXCAvLAogICAgZWw6ICdoMycsCiAgICB0eXBlOiAnYmxvY2snLAogICAgY2s6ICgpID0+IHt9LAogICAgY2xhc3M6ICdoM2NsYXNzJwogIH0sCiAgewogICAgcmVnOiAvXiMjIyNcIC8sCiAgICBlbDogJ2g0JywKICAgIHR5cGU6ICdibG9jaycsCiAgICBjazogKCkgPT4ge30sCiAgICBjbGFzczogJ2g0Y2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC9eIyMjIyNcIC8sCiAgICBlbDogJ2g1JywKICAgIHR5cGU6ICdibG9jaycsCiAgICBjazogKCkgPT4ge30sCiAgICBjbGFzczogJ2g1Y2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC9eIyMjIyMjXCAvLAogICAgZWw6ICdoNicsCiAgICB0eXBlOiAnYmxvY2snLAogICAgY2s6ICgpID0+IHt9LAogICAgY2xhc3M6ICdoNmNsYXNzJwogIH0sCiAgewogICAgcmVnOiAvKD88IWApKGAoW15gXSspYCg/IWApKS9nLAogICAgZWw6ICdjb2RlJywKICAgIHR5cGU6ICdpbmxpbmUnLAogICAgY2s6ICgpID0+IHt9LAogICAgY2xhc3M6ICdjb2RlLW1kLWNsYXNzJwogIH0sCiAgewogICAgcmVnOiAvKD88IVwqKVwqKD8hXCopKD89XFMpKC4rPykoPzw9XFMpXCooPyFcKil8KD88IV8pXyg/IV8pKD89XFMpKC4rPykoPzw9XFMpXyg/IV8pL2csCiAgICBlbDogJ2VtJywKICAgIHR5cGU6ICdpbmxpbmUnLAogICAgY2s6ICgpID0+IHt9LAogICAgY2xhc3M6ICdlbS1tZC1jbGFzcycKICB9LAogIHsKICAgIHJlZzogLyhcKlwqfF9fKSg/PVxTKSguKz8pKD88PVxTKVwxL2csCiAgICBlbDogJ2InLAogICAgdHlwZTogJ2lubGluZScsCiAgICBjazogKCkgPT4ge30sCiAgICBjbGFzczogJ2ItbWQtY2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC8oXnxcbilbKi1dXCArKC4qPykoPz1cbnwkKS9nLAogICAgZWw6ICd1bCcsCiAgICB0eXBlOiAnY29tJywKICAgIGNrOiAoKSA9PiB7fSwKICAgIGNsYXNzOiAndWwtbGktbWQtY2xhc3MnCiAgfSwKICB7CiAgICByZWc6IC8oXnxcbilgYGAoW1xzXFNdKj8pYGBgL2csCiAgICBlbDogJ3ByZScsCiAgICB0eXBlOiAnYmxvY2snLAogICAgY2s6ICgpID0+IHt9LAogICAgY2xhc3M6ICdjb2RlLWJsb2NrLWNsYXNzJyAvLyDmt7vliqDku6PnoIHlnZfnmoTphY3nva4KICB9Cl0KCi8vIOenu+WKqOWFieagh+WIsOaMh+WumuWFg+e0oOeahOacq+Wwvgpjb25zdCBtb3ZlQ3Vyc29yVG9FbmQgPSAoZWxlbWVudDogTm9kZSkgPT4gewogIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKQogIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKQogIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoZWxlbWVudCkKICByYW5nZS5jb2xsYXBzZSh0cnVlKQogIHNlbGVjdGlvbj8ucmVtb3ZlQWxsUmFuZ2VzKCkKICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKQp9CgovLyDmuLLmn5PomZrmi5/oioLngrnliLDmlofmoaPniYfmrrUKY29uc3QgcmVuZGVyVG9GcmFnbWVudCA9ICh2Tm9kZTogYW55LCBmcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCkgPT4gewogIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogIHJlbmRlcih2Tm9kZSwgdGVtcERpdikKICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQhKQp9Cgpjb25zdCBoaWdobGlnaHRDb2RlID0gKGNvZGU6IHN0cmluZywgdHlwZTogc3RyaW5nID0gJ2phdmFzY3JpcHQnKSA9PiB7CiAgLy8g6L+Z6YeM5Y+v5Lul5a6e546w5Luj56CB6auY5Lqu55qE6YC76L6RCiAgLy8g5L6L5aaC77yM5bCG54m55a6a5YWz6ZSu5a2X5YyF6KO55ZyoIHNwYW4g5qCH562+5YaFCiAgbGV0IHN0cjogUmVnRXhwCiAgc3dpdGNoICh0eXBlKSB7CiAgICBjYXNlICdqYXZhc2NyaXB0JzoKICAgICAgc3RyID0gLyhjb25zdCB8bGV0IHx2YXIgIHxmdW5jdGlvbiB8aWYgfGVsc2UgfHJldHVybiB8Zm9yIHx3aGlsZSB8Y2xhc3MgfGltcG9ydCB8ZXhwb3J0ICkvZwogICAgICBicmVhawogICAgZGVmYXVsdDoKICAgICAgc3RyID0gLyhjb25zdCB8bGV0IHx2YXIgIHxmdW5jdGlvbiB8aWYgfGVsc2UgfHJldHVybiB8Zm9yIHx3aGlsZSB8Y2xhc3MgfGltcG9ydCB8ZXhwb3J0ICkvZwogIH0KCiAgcmV0dXJuIGNvZGUKICAgIC5yZXBsYWNlKHN0ciwgJzxzcGFuIGNsYXNzPSJtay1rZXl3b3JkIj4kMTwvc3Bhbj4nKQogICAgLnJlcGxhY2UoLyhbYS16QS1aX11cdyopXHMqXCgvZywgJzxzcGFuIGNsYXNzPSJtay1mdW5jdGlvbiI+JDE8L3NwYW4+KCcpCiAgICAucmVwbGFjZSgvKFwvXC8uKikvZywgJzxpIGNsYXNzPSJtay1jb21tZW50Ij4kMTwvaT4nKQp9Cgpjb25zdCBjcmVhdGVFbGVtZW50QmxvY2sgPSAoCiAgZWw6IHN0cmluZywKICBjbGFzc05hbWU6IHN0cmluZywKICB0ZXh0OiBzdHJpbmcsCiAgY29udGVudGVkaXRhYmxlOiBhbnkgPSB0cnVlLAogIGtleWRvd246IEZ1bmN0aW9uID0gbWtLZXlkb3duCikgPT4gewogIHJldHVybiBoKAogICAgZWwsCiAgICB7CiAgICAgIGNsYXNzOiBjbGFzc05hbWUsCiAgICAgIGNvbnRlbnRlZGl0YWJsZSwKICAgICAgdGFiaW5kZXg6ICcwJywKICAgICAgb25JbnB1dDogbWtJbnB1dCwKICAgICAgb25Db21wb3NpdGlvbmVuZDogbWtDb21wb3NpdGlvbkVuZCwKICAgICAgb25Db21wb3NpdGlvbnN0YXJ0OiBta0NvbXBvc2l0aW9uU3RhcnQsCiAgICAgIG9uS2V5ZG93bjoga2V5ZG93biB8fCBta0tleWRvd24KICAgIH0sCiAgICB0ZXh0CiAgKQp9Ci8vIOWkhOeQhuWFg+e0oApjb25zdCBzZXRFbGVtZW50ID0gKGNvbnRlbnQ6IHN0cmluZywgZWw6IEVsLCBub2RlOiBOb2RlKSA9PiB7CiAgY29uc3QgbWF0Y2ggPSBjb250ZW50Lm1hdGNoKGVsLnJlZykKICBpZiAoIW1hdGNoKSByZXR1cm4KICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKQogIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZQogIGxldCBlbmROb2RlOiBOb2RlIHwgbnVsbCA9IG51bGwKICAvLyDlhYjlpITnkIbku6PnoIHlnZcKICBpZiAoZWwudHlwZSA9PT0gJ2Jsb2NrJyAmJiBlbC5yZWcudGVzdChjb250ZW50KSkgewogICAgY29uc3Qgdk5vZGUgPSBjcmVhdGVFbGVtZW50QmxvY2soZWwuZWwsIGVsLmNsYXNzLCBjb250ZW50LnJlcGxhY2UoZWwucmVnLCAnJykudHJpbSgpKQogICAgcmVuZGVyVG9GcmFnbWVudCh2Tm9kZSwgZnJhZ21lbnQpCiAgICBlbmROb2RlID0gZnJhZ21lbnQuZmlyc3RDaGlsZAogICAgLy8gfQogIH0gZWxzZSBpZiAoZWwudHlwZSA9PT0gJ2lubGluZScpIHsKICAgIGxldCBsYXN0SW5kZXggPSAwCiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBjb25zdCByZXN1bHQgPSBlbC5yZWcuZXhlYyhjb250ZW50KQogICAgICBpZiAoIXJlc3VsdCkgYnJlYWsKCiAgICAgIGlmIChyZXN1bHQuaW5kZXggPiBsYXN0SW5kZXgpIHsKICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCgKICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnQuc2xpY2UobGFzdEluZGV4LCByZXN1bHQuaW5kZXgpICsgJ1x1MjAwOScpCiAgICAgICAgKQogICAgICB9IGVsc2UgewogICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcdTIwMDknKSkKICAgICAgfQogICAgICBsZXQgdGV4dCA9IHJlc3VsdFsyXSB8fCByZXN1bHRbMV0gfHwgcmVzdWx0WzBdCiAgICAgIGNvbnN0IGlubGluZVZOb2RlID0gY3JlYXRlRWxlbWVudEJsb2NrKGVsLmVsLCBlbC5jbGFzcywgdGV4dCkKCiAgICAgIHJlbmRlclRvRnJhZ21lbnQoaW5saW5lVk5vZGUsIGZyYWdtZW50KQoKICAgICAgbGFzdEluZGV4ID0gZWwucmVnLmxhc3RJbmRleAogICAgfQoKICAgIGVuZE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXHUyMDA5JykKICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVuZE5vZGUpCiAgICBpZiAobGFzdEluZGV4IDwgY29udGVudC5sZW5ndGgpIHsKICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudC5zbGljZShsYXN0SW5kZXgpKSkKICAgIH0KICB9IGVsc2UgaWYgKGVsLnR5cGUgPT09ICdjb20nKSB7CiAgICBjb25zdCB1bFZOb2RlID0gaCgKICAgICAgZWwuZWwsCiAgICAgIHsgY2xhc3M6IGVsLmNsYXNzIH0sCiAgICAgIG1hdGNoLm1hcCgobSkgPT4gaCgnbGknLCB7fSwgbVsyXSkpIC8vIOWIm+W7uiBsaQogICAgKQogICAgcmVuZGVyVG9GcmFnbWVudCh1bFZOb2RlLCBmcmFnbWVudCkKICAgIGVuZE5vZGUgPSBmcmFnbWVudC5maXJzdENoaWxkCiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbmROb2RlISkKICB9CiAgaWYgKGVuZE5vZGUgJiYgcGFyZW50KSB7CiAgICBub2RlLnJlcGxhY2VDaGlsZChmcmFnbWVudCwgbm9kZSEuZmlyc3RDaGlsZCEpCiAgICBtb3ZlQ3Vyc29yVG9FbmQoZW5kTm9kZSkKICB9Cn0KCi8vIOeCueWHu+WkjeWItueahOS6i+S7tuWkhOeQhuWHveaVsApjb25zdCBoYW5kbGVDb3B5Q2xpY2sgPSAoZTogRXZlbnQpID0+IHsKICBjb25zdCBjbm9kZSA9IGUudGFyZ2V0IGFzIE5vZGUKICBjb25zdCB0ZXh0ID0gY25vZGUucGFyZW50Tm9kZT8ubGFzdENoaWxkPy5maXJzdENoaWxkPy50ZXh0Q29udGVudAoKICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0ISkudGhlbigoKSA9PiB7CiAgICBjb3B5VGV4dC52YWx1ZSA9ICflt7LlpI3liLYnCgogICAgLy8g5LiA5q615pe26Ze05ZCO5oGi5aSN4oCc5aSN5Yi25Luj56CB4oCd5oyJ6ZKu5paH5pysCiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgY29weVRleHQudmFsdWUgPSAn5aSN5Yi25Luj56CBJwogICAgfSwgMjAwMCkgLy8gMuenkuWQjuaBouWkjQogIH0pCn0KY29uc3QgaGFuZGxlQ29kZUJsb2NrID0gKHR5cGU6IHN0cmluZywgY29kZUNvbnRlbnQ6IHN0cmluZywgZTogRXZlbnQpID0+IHsKICAvLyBjb25zdCBjb2RlQ29udGVudCA9ICcnIC8vIOWQiOW5tuWkmuihjOS7o+eggQogIGNvbnN0IG5vZGUgPSBlLnRhcmdldCBhcyBOb2RlCiAgY29uc3QgaGlnaGxpZ2h0ZWRDb2RlID0gaGlnaGxpZ2h0Q29kZShjb2RlQ29udGVudCkgLy8g6auY5Lqu5Luj56CBCiAgY29uc3Qgdk5vZGUgPSBoKCdkaXYnLCB7IGNsYXNzOiAnY29kZS1ibG9jay1jbGFzcycgfSwgWwogICAgaCgnZGl2JywgeyBjbGFzczogJ2NvZGUtaGVhZGVyJyB9LCB0eXBlKSwgLy8g6aG26YOo5qC35byPCiAgICBoKAogICAgICAnYnV0dG9uJywKICAgICAgewogICAgICAgIGNsYXNzOiAnZGVsZXRlLWJ1dHRvbicsCiAgICAgICAgb25DbGljazogKGUpID0+IHsKICAgICAgICAgIHJlbW92ZUN1cnJlbnROb2RlKGUsICcnLCB0cnVlKQogICAgICAgIH0KICAgICAgfSwKICAgICAgJ+enu+mZpCcgLy8g5aSN5Yi25Luj56CB5oyJ6ZKuCiAgICApLAogICAgaCgKICAgICAgJ2J1dHRvbicsCiAgICAgIHsKICAgICAgICBjbGFzczogJ2NvcHktYnV0dG9uJywKICAgICAgICBvbkNsaWNrOiBoYW5kbGVDb3B5Q2xpY2sKICAgICAgfSwKICAgICAgY29weVRleHQudmFsdWUgLy8g5aSN5Yi25Luj56CB5oyJ6ZKuCiAgICApLAogICAgaCgncHJlJywgeyBjbGFzczogJ2NvZGUtY29udGVudC1jbGFzcycgfSwgWwogICAgICBoKAogICAgICAgICdkaXYnLAogICAgICAgIHsKICAgICAgICAgIGNsYXNzOiAnY29kZS1saW5lIHBsYWNlaG9sZGVyJywKICAgICAgICAgIGNvbnRlbnRlZGl0YWJsZTogJ3BsYWludGV4dC1vbmx5JywKICAgICAgICAgIHRhYmluZGV4OiAnMCcsCiAgICAgICAgICBvbklucHV0OiBta0JsYWNrQ29kZUlucHV0LAogICAgICAgICAgb25Db21wb3NpdGlvbmVuZDogbWtDb21wb3NpdGlvbkVuZCwKICAgICAgICAgIG9uQ29tcG9zaXRpb25zdGFydDogbWtDb21wb3NpdGlvblN0YXJ0CiAgICAgICAgICAvLyBvbktleWRvd246IGtleWRvd24gfHwgbWtLZXlkb3duCiAgICAgICAgfSwKICAgICAgICBoaWdobGlnaHRlZENvZGUKICAgICAgKQogICAgXSkgLy8g5Luj56CB5Z2XCiAgXSkKCiAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkKICByZW5kZXJUb0ZyYWdtZW50KHZOb2RlLCBmcmFnbWVudCkKICBub2RlPy5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsIG5vZGUpCiAgY29uc3QgZiA9IG5vZGU/LnByZXZpb3VzU2libGluZz8ubGFzdENoaWxkPy5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50CiAgZi5mb2N1cygpCiAgLy8g5ZyoIGVuZE5vZGUg55qE5ZCO6Z2i5o+S5YWl5paw55qE5Luj56CB5Z2XCiAgaWYgKCFub2RlPy5uZXh0U2libGluZykgewogICAgbm9kZSEudGV4dENvbnRlbnQgPSBudWxsCiAgfSBlbHNlIHsKICAgIHJlbW92ZUN1cnJlbnROb2RlKGUsICcnLCB0cnVlKQogIH0KCiAgLy8gfQp9CmNvbnN0IHNhdmVTZWxlY3Rpb24gPSAoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSA9PiB7CiAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpCiAgaWYgKHNlbGVjdGlvbiEucmFuZ2VDb3VudCA+IDApIHsKICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uPy5nZXRSYW5nZUF0KDApCiAgICBjb25zdCBwcmVTZWxlY3Rpb25SYW5nZSA9IHJhbmdlPy5jbG9uZVJhbmdlKCkKICAgIHByZVNlbGVjdGlvblJhbmdlPy5zZWxlY3ROb2RlQ29udGVudHMoY29udGFpbmVyRWwpCiAgICBwcmVTZWxlY3Rpb25SYW5nZT8uc2V0RW5kKHJhbmdlIS5zdGFydENvbnRhaW5lciwgcmFuZ2UhLnN0YXJ0T2Zmc2V0KQogICAgY29uc3Qgc3RhcnQgPSBwcmVTZWxlY3Rpb25SYW5nZSEudG9TdHJpbmcoKS5sZW5ndGgKCiAgICByZXR1cm4gewogICAgICBzdGFydDogc3RhcnQsCiAgICAgIGVuZDogc3RhcnQgKyByYW5nZSEudG9TdHJpbmcoKS5sZW5ndGgKICAgIH0KICB9CiAgcmV0dXJuIG51bGwKfQpjb25zdCByZXN0b3JlU2VsZWN0aW9uID0gKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgc2F2ZWRTZWw6IGFueSkgPT4gewogIGNvbnN0IGNoYXJJbmRleCA9IHsgY291bnQ6IDAgfQogIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKQogIHJhbmdlLnNldFN0YXJ0KGNvbnRhaW5lckVsLCAwKQogIHJhbmdlLmNvbGxhcHNlKHRydWUpCgogIGNvbnN0IG5vZGVTdGFjayA9IFtjb250YWluZXJFbF0KICBsZXQgbm9kZSwKICAgIGZvdW5kU3RhcnQgPSBmYWxzZSwKICAgIHN0b3AgPSBmYWxzZQoKICB3aGlsZSAoIXN0b3AgJiYgKG5vZGUgPSBub2RlU3RhY2sucG9wKCkpKSB7CiAgICAvLyDmo4Dmn6XoioLngrnmmK/lkKbkuLrmlofmnKzoioLngrkKICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkgewogICAgICBjb25zdCB0ZXh0Tm9kZSA9IG5vZGUgYXMgdW5rbm93biBhcyBUZXh0IC8vIOeOsOWcqOWPr+S7peWuieWFqOWcsOaWreiogOS4uiBUZXh0IOexu+WeiwogICAgICBjb25zdCBuZXh0Q2hhckluZGV4ID0gY2hhckluZGV4LmNvdW50ICsgdGV4dE5vZGUubGVuZ3RoCgogICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgc2F2ZWRTZWwuc3RhcnQgPj0gY2hhckluZGV4LmNvdW50ICYmIHNhdmVkU2VsLnN0YXJ0IDw9IG5leHRDaGFySW5kZXgpIHsKICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXh0Tm9kZSwgc2F2ZWRTZWwuc3RhcnQgLSBjaGFySW5kZXguY291bnQpCiAgICAgICAgZm91bmRTdGFydCA9IHRydWUKICAgICAgfQogICAgICBpZiAoZm91bmRTdGFydCAmJiBzYXZlZFNlbC5lbmQgPj0gY2hhckluZGV4LmNvdW50ICYmIHNhdmVkU2VsLmVuZCA8PSBuZXh0Q2hhckluZGV4KSB7CiAgICAgICAgcmFuZ2Uuc2V0RW5kKHRleHROb2RlLCBzYXZlZFNlbC5lbmQgLSBjaGFySW5kZXguY291bnQpCiAgICAgICAgc3RvcCA9IHRydWUKICAgICAgfQogICAgICBjaGFySW5kZXguY291bnQgPSBuZXh0Q2hhckluZGV4CiAgICB9IGVsc2UgewogICAgICAvLyDlpoLmnpzkuI3mmK/mlofmnKzoioLngrnvvIzliJnnu6fnu63lpITnkIblhbblrZDoioLngrkKICAgICAgZm9yIChsZXQgaSA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIG5vZGVTdGFjay5wdXNoKG5vZGU/LmNoaWxkTm9kZXNbaV0gYXMgSFRNTEVsZW1lbnQpCiAgICAgIH0KICAgIH0KICB9CgogIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKQogIHNlbGVjdGlvbj8ucmVtb3ZlQWxsUmFuZ2VzKCkKICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKQp9CmNvbnN0IG1rQmxhY2tDb2RlSW5wdXQgPSAoZTogRXZlbnQsIHN0cjogc3RyaW5nID0gJzwvc3Bhbj4nKSA9PiB7CiAgY29uc3QgZWwgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudAogIGNvbnN0IGNvbnRlbnQgPSBlbC50ZXh0Q29udGVudAogIGNvbnN0IGxhc3RTcGFuSW5kZXggPSBjb250ZW50Py5sYXN0SW5kZXhPZihzdHIpIHx8IDAKICAvLyDmoLnmja7mnIDlkI7kuIDkuKogPC9zcGFuPiDliIblibLlrZfnrKbkuLIKICBpZiAobGFzdFNwYW5JbmRleCAhPT0gLTEpIHsKICAgIGNvbnN0IHBhcnQxID0gY29udGVudD8uc3Vic3RyaW5nKDAsIGxhc3RTcGFuSW5kZXggKyA3KSAvLyDljIXlkKsgPC9zcGFuPiDnmoTpg6jliIYKICAgIGNvbnN0IHBhcnQyID0gY29udGVudD8uc3Vic3RyaW5nKGxhc3RTcGFuSW5kZXggKyA3KSB8fCAnJyAvLyDliankvZnpg6jliIYKICAgIGNvbnN0IHJlcyA9IGhpZ2hsaWdodENvZGUocGFydDIpCiAgICBlbC5pbm5lckhUTUwgPSBwYXJ0MSArIHJlcwogICAgcmV0dXJuCiAgfQoKICBjb25zdCByZXMgPSBoaWdobGlnaHRDb2RlKGNvbnRlbnQhKQogIGNvbnN0IHNhdmVkU2VsZWN0aW9uID0gc2F2ZVNlbGVjdGlvbihlbCkKICBlbC5pbm5lckhUTUwgPSByZXMKICBpZiAoc2F2ZWRTZWxlY3Rpb24pIHsKICAgIHJlc3RvcmVTZWxlY3Rpb24oZWwsIHNhdmVkU2VsZWN0aW9uKSAvLyDmgaLlpI3lhYnmoIfkvY3nva4KICB9Cn0KY29uc3QgcHJvY2Vzc0NvbnRlbnQgPSAoZTogRXZlbnQsIGNvbnRlbnQ6IHN0cmluZykgPT4gewogIGlmIChjb250ZW50Lm1hdGNoKC9eYGBgLiovZykpIHsKICAgIGNvbnN0IHR5cGUgPSBjb250ZW50LnNwbGl0KCdgYGAnKVsxXSB8fCAnamF2YXNjcmlwdCcKICAgIGhhbmRsZUNvZGVCbG9jayh0eXBlLCAnJywgZSkKICAgIC8vIH0KICB9IGVsc2UgewogICAgZWxMaXN0LmZvckVhY2goKGVsKSA9PiBzZXRFbGVtZW50KGNvbnRlbnQsIGVsLCBlLnRhcmdldCBhcyBOb2RlKSkKICB9Cn0KCmNvbnN0IG1rSW5wdXQgPSAoZTogRXZlbnQpID0+IHsKICBpZiAoaXNDb21wb3NpbmcpIHJldHVybgogIG5leHRUaWNrKCgpID0+IHsKICAgIG5leHRUaWNrKCgpID0+IHsKICAgICAgY29uc3QgY29udGVudCA9IChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQgfHwgJycKICAgICAgcHJvY2Vzc0NvbnRlbnQoZSwgY29udGVudCkKICAgIH0pCiAgfSkKfQpjb25zdCBta0tleWRvd24gPSAoZTogYW55KSA9PiB7CiAgc2V0SW5wdXRQcmV2ZW50KGUpCn0KCi8vIOW9k+eUqOaIt+W8gOWni+aLvOmfs+i+k+WFpeaXtgpjb25zdCBta0NvbXBvc2l0aW9uU3RhcnQgPSAoKSA9PiB7CiAgaXNDb21wb3NpbmcgPSB0cnVlCn0KCi8vIOW9k+eUqOaIt+e7k+adn+aLvOmfs+i+k+WFpeaXtgpjb25zdCBta0NvbXBvc2l0aW9uRW5kID0gKGU6IGFueSkgPT4gewogIGlzQ29tcG9zaW5nID0gZmFsc2UKICBta0lucHV0KGUpCn0KY29uc3QgcmVtb3ZlQ3VycmVudE5vZGUgPSAoZTogRXZlbnQsIHRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9ICcnLCB0eXBlOiBib29sZWFuID0gZmFsc2UpID0+IHsKICBsZXQgdGFyZ2V0OiBIVE1MRWxlbWVudAoKICBpZiAodHlwZSkgdGFyZ2V0ID0gKGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50CiAgZWxzZSB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudAogIGNvbnN0IHByZXZpb3VzU2libGluZyA9IHRhcmdldD8ucHJldmlvdXNTaWJsaW5nIGFzIEhUTUxFbGVtZW50CgogIC8vIOWmguaenOWtmOWcqOWJjeS4gOS4quWFhOW8n+iKgueCueS4lOS4uiBjb250ZW50ZWRpdGFibGUKICBpZiAocHJldmlvdXNTaWJsaW5nICYmIHByZXZpb3VzU2libGluZy5pc0NvbnRlbnRFZGl0YWJsZSkgewogICAgLy8g5bCG54m55a6a55qE5a2X56ym5Liy6L+95Yqg5Yiw5YmN5LiA5Liq6IqC54K555qE5pyr5bC+CgogICAgLy8g5bCG5YWJ5qCH56e75Yqo5Yiw5YmN5LiA5Liq6IqC54K555qE5pyr5bC+CiAgICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkKICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKQoKICAgIC8vIOWwhuWFieagh+iuvue9ruWIsOWJjeS4gOS4quiKgueCueeahOacgOWQjuS9jee9rgogICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHByZXZpb3VzU2libGluZykKICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKSAvLyDorr7nva7kuLogZmFsc2Ug6KGo56S65YWJ5qCH5pS+5Zyo5YaF5a655pyr5bC+CgogICAgLy8g5riF6Zmk546w5pyJ55qE6YCJ5Yy677yM5bm25bCG5paw55qE6IyD5Zu05re75Yqg5Yiw6YCJ5Yy6CiAgICBzZWxlY3Rpb24/LnJlbW92ZUFsbFJhbmdlcygpCiAgICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKQogICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAvLyDogZrnhKbliLDliY3kuIDkuKrlj6/nvJbovpHlrrnlmagKICAgIGlmIChwcmV2aW91c1NpYmxpbmcuZmlyc3RDaGlsZD8uZmlyc3RDaGlsZCkgewogICAgICBjb25zdCBuZXdOb2RlID0gcHJldmlvdXNTaWJsaW5nPy5maXJzdENoaWxkLmZpcnN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQKICAgICAgcmVQb3NpdGlvbih0YXJnZXQsIHByZXZpb3VzU2libGluZywgbmV3Tm9kZSwgdGV4dCkKICAgIH0gZWxzZSB7CiAgICAgIHJlUG9zaXRpb24odGFyZ2V0LCBwcmV2aW91c1NpYmxpbmcsIHByZXZpb3VzU2libGluZywgdGV4dCkKICAgIH0KICAgIHJldHVybgogIH0KCiAgaWYgKHR5cGUpIHsKICAgIGNvbnN0IG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRTaWJsaW5nIGFzIEhUTUxFbGVtZW50CgogICAgcmVQb3NpdGlvbih0YXJnZXQsIG5leHRTaWJsaW5nLCBuZXh0U2libGluZywgJycsIHR5cGUpCiAgfQp9Cgpjb25zdCByZVBvc2l0aW9uID0gKAogIHRhcmdldDogYW55LAogIHByZXZpb3VzU2libGluZzogSFRNTEVsZW1lbnQsCiAgbmV3Tm9kZTogSFRNTEVsZW1lbnQsCiAgdGV4dDogc3RyaW5nID0gJycsCiAgdHlwZTogYm9vbGVhbiA9IGZhbHNlCikgPT4gewogIHByZXZpb3VzU2libGluZy5mb2N1cygpCgogIGlmICghdHlwZSkgewogICAgY29uc3Qgc2F2ZWRTZWxlY3Rpb24gPSBzYXZlU2VsZWN0aW9uKG5ld05vZGUpCiAgICBuZXdOb2RlLnRleHRDb250ZW50ISArPSB0ZXh0CiAgICBpZiAoc2F2ZWRTZWxlY3Rpb24pIHsKICAgICAgcmVzdG9yZVNlbGVjdGlvbihuZXdOb2RlLCBzYXZlZFNlbGVjdGlvbikgLy8g5oGi5aSN5YWJ5qCH5L2N572uCiAgICB9CiAgfQogIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnBhcmVudE5vZGUpIHsKICAgIC8vIOS7jueItuiKgueCueS4reenu+mZpOebruagh+WFg+e0oAogICAgdGFyZ2V0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFyZ2V0KQogIH0KfQpjb25zdCBzZXRJbnB1dFByZXZlbnQgPSAoZTogRXZlbnQpID0+IHsKICBjb25zdCBwYXJlbnQgPSAoZS50YXJnZXQgYXMgTm9kZSkucGFyZW50Tm9kZQogIGNvbnN0IGNvbnRlbnQgPSAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRleHRDb250ZW50CiAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpCiAgY29uc3QgcmFuZ2UgPSBzZWxlY3Rpb24/LmdldFJhbmdlQXQoMCkKICBjb25zdCBjdXJyZW50Tm9kZSA9IHJhbmdlPy5zdGFydENvbnRhaW5lcgogIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50CiAgLy8g6I635Y+W5YWJ5qCH5ZCO55qE5YaF5a65CiAgY29uc3QgdGV4dEFmdGVyQ3Vyc29yID0gY3VycmVudE5vZGU/LnRleHRDb250ZW50Py5zbGljZShyYW5nZT8uZW5kT2Zmc2V0KQoKICBpZiAoZSBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQgJiYgZS5rZXkgPT09ICdFbnRlcicpIHsKICAgIGlmIChpc0NvbXBvc2luZykgcmV0dXJuCiAgICBpZiAoY29udGVudD8ubWF0Y2goL2BgYC4qL2cpKSB7CiAgICAgIHJldHVybgogICAgfQogICAgZS5wcmV2ZW50RGVmYXVsdCgpIC8vIOmYu+atoum7mOiupOeahOWbnui9puihjOS4ugogICAgY3VycmVudE5vZGUhLnRleHRDb250ZW50ID0gY3VycmVudE5vZGUhLnRleHRDb250ZW50IS5zbGljZSgwLCByYW5nZT8uZW5kT2Zmc2V0KQogICAgLy8g5Yib5bu65LiA5Liq5paw55qEIGRpdiDlhYPntKAKICAgIGNvbnN0IG5ld0RpdiA9IGNyZWF0ZUVsZW1lbnRCbG9jaygnZGl2JywgJ3BsYWNlaG9sZGVyJywgdGV4dEFmdGVyQ3Vyc29yISkKICAgIC8vIOWwhueEpueCueenu+WIsOaWsOeahCBkaXYg5LiKCiAgICAvLyBjb25zdCB0ZW1wQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpCiAgICAvLyDkvb/nlKggcmVuZGVyIOWHveaVsOWwhuiZmuaLn+iKgueCuea4suafk+S4uuecn+WuniBET00KICAgIHJlbmRlclRvRnJhZ21lbnQobmV3RGl2LCBmcmFnbWVudCkKCiAgICAvLyDlsIbnlJ/miJDnmoTnnJ/lrp4gRE9NIOaPkuWFpeWIsOW9k+WJjSBkaXYg55qE5LiL5LiA5Liq5YWE5byf6IqC54K55L2N572uCiAgICBjb25zdCBuZXdEaXZFbGVtZW50ID0gZnJhZ21lbnQuZmlyc3RDaGlsZAogICAgaWYgKG5ld0RpdkVsZW1lbnQgJiYgcGFyZW50KSB7CiAgICAgIC8vIOWwhueUn+aIkOeahOecn+WuniBET00g5o+S5YWl5Yiw5b2T5YmNIGRpdiDnmoTkuIvkuIDkuKrlhYTlvJ/oioLngrnkvY3nva4KICAgICAgaWYgKHRhcmdldC5uZXh0U2libGluZykgewogICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3RGl2RWxlbWVudCwgdGFyZ2V0Lm5leHRTaWJsaW5nKQogICAgICB9IGVsc2UgewogICAgICAgIC8vIOWmguaenOW9k+WJjeayoeacieS4i+S4gOS4quWFhOW8n+iKgueCue+8jOWImeaPkuWFpeWIsOacgOWQjgogICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChuZXdEaXZFbGVtZW50KQogICAgICB9CiAgICAgIGNvbnN0IG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRTaWJsaW5nIGFzIEhUTUxFbGVtZW50CiAgICAgIG5leHRTaWJsaW5nLmZvY3VzKCkKICAgIH0KICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50ICYmIGUua2V5ID09PSAnQmFja3NwYWNlJykgewogICAgaWYgKCFjdXJyZW50Tm9kZSEudGV4dENvbnRlbnQhLnNsaWNlKDAsIHJhbmdlPy5lbmRPZmZzZXQpKSB7CiAgICAgIHJlbW92ZUN1cnJlbnROb2RlKGUsIHRleHRBZnRlckN1cnNvcikKICAgIH0KICB9Cn0KCmV4cG9ydCB7IG1rS2V5ZG93biwgbWtDb21wb3NpdGlvblN0YXJ0LCBta0NvbXBvc2l0aW9uRW5kLCBta0lucHV0IH0KAAAAAAAAAACmMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSsAAAAAAAAjKwAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA9hkAAAAAAAD2GQAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPYZAAAAAAAA+BkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hkAAAAAAAD2GQAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+BkAAAAAAAD4GQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"ls",
			"l s"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/dalen/Sites/blog/frontend",
		"/Users/dalen/Sites/blog/frontend/src",
		"/Users/dalen/Sites/blog/frontend/src/libs"
	],
	"file_history":
	[
		"/Users/dalen/Sites/blog/frontend/tsconfig.app.json",
		"/Users/dalen/Sites/blog/frontend/tsconfig.json",
		"/Users/dalen/Sites/blog/frontend/src/libs/markdown.ts",
		"/Users/dalen/Sites/blog/frontend/text.ts",
		"/Users/dalen/Sites/blog/frontend/cteateDiv.ts",
		"/Users/dalen/Desktop/document/codemirror使用手册.md",
		"/Users/dalen/Downloads/untitled folder/blog.sql",
		"/Users/dalen/Downloads/3223c6e0-573a-471c-b1d5-c47e5b9398f6/sdk/client/DefaultKaoLaClient.java",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/e35890820ebce0e5bdb38df1b7dd870b/File/index.php",
		"/Users/dalen/Desktop/appuim的使用",
		"/Users/dalen/Desktop/用户手册和参考指南版本5.46.1.js",
		"/Users/dalen/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/dalen/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/dalen/Desktop/data.json",
		"/Users/dalen/Desktop/iterm2快捷键使用",
		"/Users/dalen/Desktop/查询毒的id为26715的绑定情况",
		"/Users/dalen/Desktop/dosc/untitled",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/663bb39baee73e345b930cd3475257d1/File/181221.txt",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/af1b0a7d8a75969cc88f56fee232511b/File/4.改价功能迁移新服务器手册.md",
		"/Users/dalen/Desktop/dosc/wxapp-mall-master/README.md",
		"/Users/dalen/Desktop/dosc/wxapp-mall-master/project.config.json",
		"/Users/dalen/Desktop/dosc/wxapp-mall-master/app.json",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/aa01f7f27075c62e6a83e9911a4677b1/File/GoodsController.php",
		"/Users/dalen/Desktop/a.json",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/af1b0a7d8a75969cc88f56fee232511b/OpenData/taobao/app-modules/base/src/Controllers/Store/TaobaoItemController.php",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/663bb39baee73e345b930cd3475257d1/File/editbind/index.html",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/663bb39baee73e345b930cd3475257d1/File/change.js",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/663bb39baee73e345b930cd3475257d1/File/page.js",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/663bb39baee73e345b930cd3475257d1/File/index(1).html",
		"/Users/dalen/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cf694be0ef4578971f25b716767ca217/Message/MessageTemp/af1b0a7d8a75969cc88f56fee232511b/OpenData/taobao/app-modules/base/src/ModuleServiceProvider.php",
		"/usr/local/var/www/taobao/app-modules/base/src/Controllers/Store/AuthController.php",
		"/usr/local/var/www/taobao/app-modules/base/src/Views/store/taobao_item/index.blade.php",
		"/usr/local/var/www/taobao/app-modules/base/src/Controllers/Store/TaobaoItemController.php",
		"/usr/local/var/www/taobao/app-modules/base/src/Views/store/taobao_item/bind.blade.php",
		"/usr/local/var/www/taobao/app-modules/base/src/Views/store/auth/bind.blade.php",
		"/usr/local/var/www/blog/vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"removeCurrentNode",
			"only"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/libs/markdown.ts",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13111,
						"regions":
						{
						},
						"selection":
						[
							[
								6648,
								6648
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TypeScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5994.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 222.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
